" ----------------------------------------------------------------------------
" PLUGIN SETTINGS
" ----------------------------------------------------------------------------

"Specify a directory for plugins
call plug#begin('~/.nvim/plugged')

"Color theme
Plug 'morhetz/gruvbox'

"Notes
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
let g:vimwiki_list = [{'path': '~/wiki/', 'syntax': 'markdown', 'ext': '.md'}]

"Fuzzy finder
Plug 'junegunn/fzf.vim'
Plug '~/.fzf'

"Pairs keybindings
Plug 'tpope/vim-unimpaired'

"Global searcher
Plug 'mileszs/ack.vim'
let g:ackprg = 'rg --vimgrep --no-heading'

"Distraction-free viewer
Plug 'junegunn/goyo.vim'

"Linter
Plug 'w0rp/ale'
let g:ale_sign_warning = ''
let g:ale_sign_error = '✗'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

"Statusline
Plug 'itchyny/lightline.vim'
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [['mode', 'paste'], ['gitbranch', 'filename', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ 'component_function': {
\   'gitbranch': 'fugitive#head'
\ },
\ }

"Git sign column
Plug 'airblade/vim-gitgutter'

"Git client
Plug 'tpope/vim-fugitive'

"File commands
Plug 'tpope/vim-eunuch'

"Syntax
Plug 'sheerun/vim-polyglot'

"Comments
Plug 'tpope/vim-commentary'

"Sorrounding chars
Plug 'tpope/vim-surround'

"Enable plugin command repeating
Plug 'tpope/vim-repeat'

"Fix indentation
Plug 'tpope/vim-sleuth'

"Directory traversal
Plug 'scrooloose/nerdtree'

"Code completion
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#auto_complete_start_length = 1

Plug 'zchee/deoplete-clang' "C-based
Plug 'zchee/deoplete-jedi' "Python

"Snippets
Plug 'shougo/neosnippet.vim'
let g:neosnippet#snippets_directory = '~/.snippets/'

"Some base snippets
Plug 'shougo/neosnippet-snippets'

"Switch header/implementation files
Plug 'derekwyatt/vim-fswitch'
augroup mycppfiles
  au!
  au BufEnter *.h let b:fswitchdst  = 'cpp'
  au BufEnter *.h let b:fswitchlocs = '../src'
  au BufEnter *.cpp let b:fswitchdst  = 'h'
  au BufEnter *.cpp let b:fswitchlocs = '../include'
augroup END

"Vim/Tmux navigation
Plug 'christoomey/vim-tmux-navigator'

"Vim/Tmux commands
Plug 'benmills/vimux'

"Vim multikey binds
Plug 'kana/vim-arpeggio'

"Handle several buffers
Plug 'vim-scripts/BufOnly.vim'

"Initialize plugin system
call plug#end()

" ----------------------------------------------------------------------------
" KEY MAPS
" ----------------------------------------------------------------------------

"Set leader key
let mapleader="\<SPACE>"

"Unbind arrow keys
nnoremap <up>    <nop>
nnoremap <down>  <nop>
nnoremap <left>  <nop>
nnoremap <right> <nop>
inoremap <up>    <nop>
inoremap <down>  <nop>
inoremap <left>  <nop>
inoremap <right> <nop>

"Toggle search higlight
nmap <Leader>w :set hlsearch!<CR>

"Fix linewise behaviour
nnoremap j gj
nnoremap k gk

"Return to last window
nmap <C-e> :e#<CR>

"Toggle display number
nmap <Leader>l :setlocal number!<CR>

"Fzf Binds
nmap <C-p> :call FZFOpen(':Buffers')<CR>
nmap <C-t> :call FZFOpen(':Files')<CR>

"Find
nmap <Leader>k :Ack! "\b<cword>\b" <CR>
nmap <Leader>f :Ack

"Run last command executed by VimuxRunCommand
map <Leader>r :VimuxRunLastCommand<CR>

"Inspect runner pane
call arpeggio#map('n', '', 0, 'vi', ':VimuxInspectRunner<CR>')

"Zoom the tmux runner pane
call arpeggio#map('n', '', 0, 'vz', ':VimuxZoomRunner<CR>')

"Prompt for a command to run
call arpeggio#map('n', '', 0, 'vp', '::VimuxPromptCommand<CR>')

"ProseMode
nmap <Leader>p :ProseMode<CR>

"Close buffer
nmap <Leader>z :bd<CR>

"Close all buffers except current
nmap <Leader>a :BufOnly<CR>

"Close preview
nmap <Leader>c :pc<CR>

"Close QuickFix window
nmap <Leader>x :cclose<CR>

"Travel windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"Toggle directory traversal
nmap <Leader>e :NERDTreeToggle<CR>

"Code completion and snippets with tab
imap <expr><TAB> pumvisible() ? "\<C-n>" : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>")
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"

"Toggle between normal and relative numbering.
nnoremap <Leader>ñ :call NumberToggle()<cr>

"Switch between source and header file
nnoremap <Leader>o :FSHere<CR>

"Create directories
nmap <Leader>md :!mkdir -p %:p:h<CR>

"Git fugitive up traversal
nnoremap <Leader>gu :edit %:h<CR>

" ----------------------------------------------------------------------------
" OPTIONS
" ----------------------------------------------------------------------------

"Set colorscheme
let g:gruvbox_contrast_dark = 'hard' "Hard contrast dark theme
colorscheme gruvbox
set bg=dark "Dark theme

"Activate syntax
syntax on

"Set basic options
set showmatch
set number
set expandtab
set tabstop=4
set shiftwidth=4

"Set search options
set incsearch
set ignorecase
set smartcase
set hlsearch

"Disable preview windows
set completeopt-=preview

"Allows switching buffers while unsaved
set hidden

"Set term colors
set termguicolors

"Disable insert status
set noshowmode

"GitGutter styling to use · instead of +/-
set updatetime=100
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" ----------------------------------------------------------------------------
" FUNCTIONS
" ----------------------------------------------------------------------------

" Avoid fzf opening files on nerdtree
function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction


"ProseMode functions
function! ProseMode()
  call goyo#execute(0, [])
  set nospell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
endfunction

"Relative numbering
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
    set number
  else
    set rnu
  endif
endfunc

"LightLine functions
function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ', all_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

"Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" ----------------------------------------------------------------------------
" COMMANDS
" ----------------------------------------------------------------------------

"ProseMode Command
command! ProseMode call ProseMode()

"ALELint update statusbar
autocmd User ALELint call s:MaybeUpdateLightline()

"Tell Vim which characters to show for expanded TABs,
"trailing whitespace, and end-of-lines. VERY useful!
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif
set list                "Show problematic characters.

"Also highlight all tabs and trailing whitespace characters.
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$\|\t/

"Auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
